# This is a composition of lint and test scripts
# Make sure to update this file along with the others

name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
    push:
        branches:
            - master
        tags:
            # normal versions
            - 'v?[0-9]+.[0-9]+.[0-9]+'
            # pre-releases
            - 'v?[0-9]+.[0-9]+.[0-9]+-**'
    pull_request: {}

permissions:
    id-token: write  # Required for OIDC
    contents: write
    pull-requests: read

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5
            - uses: actions/setup-node@v5
              with:
                  node-version: 22.x

            - name: Install Dependencies
              run: npm run npm

            - name: 'Build backend'
              run: npm run build:backend

            - name: Build
              run: NODE_OPTIONS=--max_old_space_size=8192 npm run build

            - name: Check TypeScript files
              run: |
                cd src-admin
                npm run check-ts
              # Wait till js-controller 7 types are available
              continue-on-error: true

    # Runs adapter tests on all supported node versions and OSes
    adapter-tests:
        if: |
            contains(github.event.head_commit.message, '[skip ci]') == false &&
            needs.check-changes.outputs.readme-only != 'true'

        needs: [build]

        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                node-version: [18.x, 20.x, 22.4.1, 24.x]
                os: [ubuntu-latest, windows-latest, macos-latest]

        steps:
            - uses: actions/checkout@v5
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v5
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Install Dependencies
              run: npm i -f

            - name: 'Build backend'
              run: npm run build:backend

            - name: Run local tests
              run: npm test

    adapter-tests-gui:
        if: |
            contains(github.event.head_commit.message, '[skip ci]') == false &&
            needs.check-changes.outputs.readme-only != 'true'

        needs: [build]

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5
            - name: Use Node.js 20.x
              uses: actions/setup-node@v5
              with:
                  node-version: 20.x

            - name: Install Dependencies
              run: npm run npm

            - name: 'Build backend'
              run: npm run build:backend

            - name: Build
              run: NODE_OPTIONS=--max_old_space_size=8192 npm run build

            - name: Run GUI tests
              run: npm run test:gui

            - name: Archive screenshots
              if: always()
              # if: failure()
              uses: actions/upload-artifact@v4
              with:
                  path: tmp/screenshots/**/*.png
                  retention-days: 3

    deploy:
        # Trigger this step only when a commit on master is tagged with a version number
        if: |
            contains(github.event.head_commit.message, '[skip ci]') == false &&
            github.event_name == 'push' &&
            startsWith(github.ref, 'refs/tags/v')

        needs: [build, adapter-tests-gui]
        runs-on: macos-latest # ubuntu-latest has too few RAM

        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Use Node.js 20.x
            uses: actions/setup-node@v1
            with:
              node-version: 20.x

          - name: Extract the version and commit body from the tag
            id: extract_release
            # The body may be multiline, therefore we need to escape some characters
            run: |
              VERSION="${{ github.ref }}"
              VERSION=${VERSION##*/v}
              echo "::set-output name=VERSION::$VERSION"
              BODY=$(git show -s --format=%b)
              BODY="${BODY//'%'/'%25'}"
              BODY="${BODY//$'\n'/'%0A'}"
              BODY="${BODY//$'\r'/'%0D'}"
              echo "::set-output name=BODY::$BODY"
          - name: Install dependencies
            run: npm ci

          - name: Publish package to npm
            run: |
              npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
              npm whoami
              npm publish
          - name: Create Github Release
            uses: actions/create-release@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              tag_name: ${{ github.ref }}
              release_name: Release v${{ steps.extract_release.outputs.VERSION }}
              draft: false
              # Prerelease versions create pre-releases on GitHub
              prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
              body: ${{ steps.extract_release.outputs.BODY }}

          - name: Notify Sentry.io about the release
            run: |
                npm i -g @sentry/cli
                export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
                export SENTRY_URL=https://sentry.iobroker.net
                export SENTRY_ORG=iobroker
                export SENTRY_PROJECT=iobroker-admin
                export SENTRY_VERSION=iobroker.admin@${{ steps.version.outputs.result }}
                export SENTRY_RELEASE=${{ steps.version.outputs.result }}
                sentry-cli releases new $SENTRY_VERSION
                sentry-cli releases finalize $SENTRY_VERSION
                sentry-cli sourcemaps inject ./adminWww
                sentry-cli sourcemaps upload ./adminWww

            # Add the following line BEFORE finalize if repositories are connected in Sentry
            # sentry-cli releases set-commits $SENTRY_VERSION --auto

            # Add the following line BEFORE finalize if sourcemap uploads are needed
            # sentry-cli releases files $SENTRY_VERSION upload-sourcemaps build/
