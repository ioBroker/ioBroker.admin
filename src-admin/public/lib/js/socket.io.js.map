{"version":3,"names":["globalThis","process","location","href","protocol","host","pathname","hostname","reload","MESSAGE_TYPES","MESSAGE","PING","PONG","CALLBACK","DEBUG","ERRORS","SocketClient","connectHandlers","reconnectHandlers","disconnectHandlers","errorHandlers","handlers","wasConnected","connectTimer","connectingTimer","connectionCount","callbacks","pending","id","lastPong","socket","url","options","pingInterval","sessionID","authTimeout","connected","log","constructor","this","debug","text","console","Date","toISOString","warn","error","getQuery","_url","parts","split","result","p","length","decodeURIComponent","connect","clearInterval","JSON","parse","stringify","Error","WebSocket","pongTimeout","parseInt","connectTimeout","connectInterval","connectMaxAttempt","now","endsWith","pop","join","query","sid","Object","prototype","hasOwnProperty","call","u","replace","keys","map","attr","undefined","name","encodeURIComponent","token","forEach","cb","close","setTimeout","onopen","setInterval","send","e","_garbageCollect","onclose","event","code","onerror","readyState","type","onmessage","message","data","args","clearTimeout","findAnswer","emit","apply","empty","newCallback","i","push","withCallback","ts","callback","Buffer","from","toString","binary","bytes","Uint8Array","len","byteLength","String","fromCharCode","btoa","_args","eventHandler","on","off","pos","indexOf","splice","_reconnect","disconnect","destroy","socketClient","io"],"sources":["../../socket.io.ts"],"sourcesContent":["/*!\n * ioBroker WebSockets\n * Copyright 2020-2025, bluefox <dogafox@gmail.com>\n * Released under the MIT License.\n * v 3.0.3 (2025_06_21)\n */\n\nif (typeof (globalThis as any).process !== 'undefined') {\n    // Implement location, localStorage and sessionStorage for Node.js environment\n    (globalThis as any).location ||= {\n        href: 'http://localhost:8081/',\n        protocol: 'http:',\n        host: 'localhost:8081',\n        pathname: '/',\n        hostname: 'localhost',\n        reload: () => {},\n    };\n}\n\ninterface ConnectOptions {\n    /** Connection name, so the backend knows who wants to connect. Optional */\n    name?: string;\n    /** Timeout for answer for ping (pong) */\n    pongTimeout?: number;\n    /** Ping interval */\n    pingInterval?: number;\n    /** connection request timeout */\n    connectTimeout?: number;\n    /** Authentication timeout */\n    authTimeout?: number;\n    /** Interval between connection attempts */\n    connectInterval?: number;\n    /** Every connection attempt the interval increasing at options.connectInterval till max this number */\n    connectMaxAttempt?: number;\n    /** Token for authentication */\n    token?: string;\n    /** WebSocket constructor, if you want to use a custom one */\n    WebSocket?: any;\n}\n\nconst MESSAGE_TYPES: Record<string, number> = {\n    MESSAGE: 0,\n    PING: 1,\n    PONG: 2,\n    CALLBACK: 3,\n};\n\nconst DEBUG = true;\n\nconst ERRORS: Record<number, string> = {\n    1000: 'CLOSE_NORMAL', // Successful operation / regular socket shutdown\n    1001: 'CLOSE_GOING_AWAY', // Client is leaving (browser tab closing)\n    1002: 'CLOSE_PROTOCOL_ERROR', // Endpoint received a malformed frame\n    1003: 'CLOSE_UNSUPPORTED', // Endpoint received an unsupported frame (e.g., binary-only endpoint received text frame)\n    1005: 'CLOSED_NO_STATUS', // Expected close status, received none\n    1006: 'CLOSE_ABNORMAL', // No close code frame has been received\n    1007: 'Unsupported payload', // Endpoint received an inconsistent message (e.g., malformed UTF-8)\n    1008: 'Policy violation', // Generic code used for situations other than 1003 and 1009\n    1009: 'CLOSE_TOO_LARGE', // Endpoint won't process a large frame\n    1010: 'Mandatory extension', // Client wanted an extension which server did not negotiate\n    1011: 'Server error', // Internal server error while operating\n    1012: 'Service restart', // Server/service is restarting\n    1013: 'Try again later', // Temporary server condition forced blocking client's request\n    1014: 'Bad gateway\tServer', // acting as gateway received an invalid response\n    1015: 'TLS handshake fail', // Transport Layer Security handshake failure\n};\n\ntype SocketEventHandler = (...args: any[]) => void;\ntype SocketConnectionHandler = (connected: boolean) => void;\ntype SocketDisconnectionHandler = () => void;\ntype SocketErrorHandler = (err: string) => void;\n\n// possible events: connect, disconnect, reconnect, error, connect_error\nclass SocketClient {\n    private readonly connectHandlers: SocketConnectionHandler[] = [];\n    private readonly reconnectHandlers: SocketConnectionHandler[] = [];\n    private readonly disconnectHandlers: SocketDisconnectionHandler[] = [];\n    private readonly errorHandlers: SocketErrorHandler[] = [];\n\n    private readonly handlers: {\n        [event: string]: SocketEventHandler[];\n    } = {};\n    private wasConnected = false;\n    private connectTimer: ReturnType<typeof setTimeout> | null = null;\n    private connectingTimer: ReturnType<typeof setTimeout> | null = null;\n    private connectionCount = 0;\n    private callbacks: ({ ts: number; cb: SocketEventHandler; id: number } | null)[] = [];\n    private pending: { name: string; args: any[] }[] = []; // pending requests till connection established\n    private id = 0;\n    private lastPong: number = 0;\n    private socket: WebSocket | null = null;\n    private url: string = '';\n    private options: ConnectOptions | null = null;\n    private pingInterval: ReturnType<typeof setInterval> | null = null;\n    private sessionID = 0;\n    private authTimeout: ReturnType<typeof setTimeout> | null = null;\n\n    public connected = false;\n\n    private readonly log: {\n        debug: (text: string) => void;\n        warn: (text: string) => void;\n        error: (text: string) => void;\n    };\n\n    constructor() {\n        this.log = {\n            debug: (text: string) => {\n                if (DEBUG) {\n                    console.log(`[${new Date().toISOString()}] ${text}`);\n                }\n            },\n            warn: (text: string) => console.warn(`[${new Date().toISOString()}] ${text}`),\n            error: (text: string) => console.error(`[${new Date().toISOString()}] ${text}`),\n        };\n    }\n\n    private static getQuery(_url: string): Record<string, string> {\n        const query = _url.split('?')[1] || '';\n        const parts = query.split('&');\n        const result: Record<string, string> = {};\n        for (let p = 0; p < parts.length; p++) {\n            const parts1 = parts[p].split('=');\n            result[parts1[0]] = decodeURIComponent(parts[1]);\n        }\n        return result;\n    }\n\n    connect(url?: string, options?: ConnectOptions): SocketClient {\n        this.log.debug('Try to connect');\n\n        // remove hash\n        if (url) {\n            url = url.split('#')[0];\n        }\n\n        this.id = 0;\n        if (this.connectTimer) {\n            clearInterval(this.connectTimer);\n            this.connectTimer = null;\n        }\n\n        this.url ||= url || globalThis.location.href;\n        this.options ||= JSON.parse(JSON.stringify(options || {}));\n        if (!this.options) {\n            throw new Error('No options provided!');\n        }\n        // Class could not be copied with JSON.stringify\n        if (options?.WebSocket) {\n            this.options.WebSocket = options?.WebSocket;\n        }\n\n        this.options.pongTimeout = parseInt(this.options.pongTimeout as unknown as string, 10) || 60000; // Timeout for answer for ping (pong)\n        this.options.pingInterval = parseInt(this.options.pingInterval as unknown as string, 10) || 5000; // Ping interval\n        this.options.connectTimeout = parseInt(this.options.connectTimeout as unknown as string, 10) || 3000; // connection request timeout\n        this.options.authTimeout = parseInt(this.options.authTimeout as unknown as string, 10) || 3000; // Authentication timeout\n        this.options.connectInterval = parseInt(this.options.connectInterval as unknown as string, 10) || 1000; // Interval between connection attempts\n        this.options.connectMaxAttempt = parseInt(this.options.connectMaxAttempt as unknown as string, 10) || 5; // Every connection attempt the interval increasing at options.connectInterval till max this number\n\n        this.sessionID = Date.now();\n        try {\n            if (this.url === '/') {\n                const parts = globalThis.location.pathname.split('/');\n                // remove filename\n                if (globalThis.location.pathname.endsWith('.html') || globalThis.location.pathname.endsWith('.htm')) {\n                    parts.pop();\n                }\n\n                this.url = `${globalThis.location.protocol || 'ws:'}//${globalThis.location.host || 'localhost'}/${parts.join('/')}`;\n            }\n\n            // extract all query attributes\n            const query = SocketClient.getQuery(this.url);\n            if (query.sid) {\n                delete query.sid;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(query, '')) {\n                delete query[''];\n            }\n\n            let u = `${this.url.replace(/^http/, 'ws').split('?')[0]}?sid=${this.sessionID}`;\n\n            // Apply a query to new url\n            if (Object.keys(query).length) {\n                u += `&${Object.keys(query)\n                    .map(attr => (query[attr] === undefined ? attr : `${attr}=${query[attr]}`))\n                    .join('&')}`;\n            }\n\n            if (this.options?.name && !query.name) {\n                u += `&name=${encodeURIComponent(this.options.name)}`;\n            }\n            if (this.options?.token) {\n                u += `&token=${this.options.token}`;\n            }\n            // \"ws://www.example.com/socketserver\"\n            this.socket = new (this.options.WebSocket || globalThis.WebSocket)(u);\n        } catch (error) {\n            this.handlers.error?.forEach(cb => cb.call(this, error));\n            this.close();\n            return this;\n        }\n\n        this.connectingTimer = setTimeout(() => {\n            this.connectingTimer = null;\n            this.log.warn('No READY flag received in 3 seconds. Re-init');\n            this.close(); // re-init connection, because no ___ready___ received in 2000 ms\n        }, this.options.connectTimeout);\n\n        if (this.socket) {\n            this.socket.onopen = (): void /*event*/ => {\n                this.lastPong = Date.now();\n                this.connectionCount = 0;\n\n                this.pingInterval = setInterval((): void => {\n                    if (!this.options) {\n                        throw new Error('No options provided!');\n                    }\n\n                    if (Date.now() - this.lastPong > (this.options?.pingInterval || 5000) - 10) {\n                        try {\n                            this.socket?.send(JSON.stringify([MESSAGE_TYPES.PING]));\n                        } catch (e) {\n                            this.log.warn(`Cannot send ping. Close connection: ${e}`);\n                            this.close();\n                            this._garbageCollect();\n                            return;\n                        }\n                    }\n                    if (Date.now() - this.lastPong > (this.options?.pongTimeout || 60000)) {\n                        this.close();\n                    }\n                    this._garbageCollect();\n                }, this.options?.pingInterval || 5000);\n            };\n\n            this.socket.onclose = (event: CloseEvent): void => {\n                if (event.code === 3001) {\n                    this.log.warn('ws closed');\n                } else {\n                    this.log.error(`ws connection error: ${ERRORS[event.code]}`);\n                }\n                this.close();\n            };\n\n            // @ts-expect-error invalid typing\n            this.socket.onerror = (error: CloseEvent): void => {\n                if (this.connected && this.socket) {\n                    if (this.socket.readyState === 1) {\n                        this.log.error(`ws normal error: ${error.type}`);\n                    }\n                    this.errorHandlers.forEach(cb => cb.call(this, ERRORS[error.code] || 'UNKNOWN'));\n                }\n                this.close();\n            };\n\n            this.socket.onmessage = (message: MessageEvent<string>): void => {\n                this.lastPong = Date.now();\n                if (!message?.data || typeof message.data !== 'string') {\n                    console.error(`Received invalid message: ${JSON.stringify(message)}`);\n                    return;\n                }\n                let data;\n                try {\n                    data = JSON.parse(message.data);\n                } catch {\n                    console.error(`Received invalid message: ${JSON.stringify(message.data)}`);\n                    return;\n                }\n\n                const type: number = data[0];\n                const id: number = data[1];\n                const name: string = data[2];\n                const args: any[] = data[3];\n\n                if (this.authTimeout) {\n                    clearTimeout(this.authTimeout);\n                    this.authTimeout = null;\n                }\n\n                if (type === MESSAGE_TYPES.CALLBACK) {\n                    this.findAnswer(id, args);\n                } else if (type === MESSAGE_TYPES.MESSAGE) {\n                    if (name === '___ready___') {\n                        this.connected = true;\n\n                        if (this.wasConnected) {\n                            this.reconnectHandlers.forEach(cb => cb.call(this, true));\n                        } else {\n                            this.connectHandlers.forEach(cb => cb.call(this, true));\n                            this.wasConnected = true;\n                        }\n\n                        if (this.connectingTimer) {\n                            clearTimeout(this.connectingTimer);\n                            this.connectingTimer = null;\n                        }\n\n                        // resend all pending requests\n                        if (this.pending.length) {\n                            this.pending.forEach(({ name, args }) => this.emit(name, ...args));\n\n                            this.pending = [];\n                        }\n                    } else if (args) {\n                        this.handlers[name]?.forEach(cb => cb.apply(this, args));\n                    } else {\n                        this.handlers[name]?.forEach(cb => cb.call(this));\n                    }\n                } else if (type === MESSAGE_TYPES.PING) {\n                    if (this.socket) {\n                        this.socket.send(JSON.stringify([MESSAGE_TYPES.PONG]));\n                    } else {\n                        this.log.warn('Cannot do pong: connection closed');\n                    }\n                } else if (type === MESSAGE_TYPES.PONG) {\n                    // lastPong saved\n                } else {\n                    this.log.warn(`Received unknown message type: ${type}`);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    private _garbageCollect(): void {\n        const now = Date.now();\n        let empty = 0;\n        if (!DEBUG) {\n            for (let i = 0; i < this.callbacks.length; i++) {\n                const callback: { ts: number; cb: SocketEventHandler; id: number } | null = this.callbacks[i];\n                if (callback) {\n                    if (callback.ts > now) {\n                        const cb = callback.cb;\n                        setTimeout(cb, 0, 'timeout');\n                        this.callbacks[i] = null;\n                        empty++;\n                    } // else callback is still valid\n                } else {\n                    empty++;\n                }\n            }\n        }\n\n        // remove nulls\n        if (empty > this.callbacks.length / 2) {\n            const newCallback = [];\n            for (let i = 0; i < this.callbacks.length; i++) {\n                this.callbacks[i] && newCallback.push(this.callbacks[i]);\n            }\n            this.callbacks = newCallback;\n        }\n    }\n\n    private withCallback(name: string, id: number, args: any[], cb: SocketEventHandler): void {\n        if (name === 'authenticate') {\n            this.authTimeout = setTimeout(() => {\n                this.authTimeout = null;\n                if (this.connected) {\n                    this.log.debug('Authenticate timeout');\n                    this.handlers.error?.forEach(cb => cb.call(this, 'Authenticate timeout'));\n                }\n                this.close();\n            }, this.options?.authTimeout || 3000);\n        }\n        this.callbacks.push({ id, cb, ts: DEBUG ? 0 : Date.now() + 30000 });\n        this.socket?.send(JSON.stringify([MESSAGE_TYPES.CALLBACK, id, name, args]));\n    }\n\n    private findAnswer(id: number, args: any[]): void {\n        for (let i = 0; i < this.callbacks.length; i++) {\n            const callback = this.callbacks[i];\n            if (callback?.id === id) {\n                const cb = callback.cb;\n                cb.call(null, ...args);\n                this.callbacks[i] = null;\n            }\n        }\n    }\n\n    emit = (name: string, ...args: any[]): void => {\n        if (!this.socket || !this.connected) {\n            if (!this.wasConnected) {\n                // cache all calls till connected\n                this.pending.push({ name, args });\n            } else {\n                this.log.warn('Not connected');\n            }\n            return;\n        }\n\n        this.id++;\n\n        if (name === 'writeFile' && args && typeof args[2] !== 'string' && args[2]) {\n            // Arguments: arg1,     arg2,     arg3, arg4\n            // Arguments: _adapter, filename, data, callback\n            if (typeof (globalThis as any).process !== 'undefined') {\n                // Node.js environment\n                args[2] = (globalThis as any).Buffer.from(args[2]).toString('base64');\n            } else {\n                // Browser environment\n                let binary = '';\n                const bytes = new Uint8Array(args[2]);\n                const len = bytes.byteLength;\n                for (let i = 0; i < len; i++) {\n                    binary += String.fromCharCode(bytes[i]);\n                }\n                args[2] = globalThis.btoa(binary);\n            }\n        }\n\n        try {\n            // if the last argument is a function\n            if (args && typeof args[args.length - 1] === 'function') {\n                const _args = [...args];\n                const eventHandler: SocketEventHandler = _args.pop();\n                this.withCallback(name, this.id, _args, eventHandler);\n            } else if (!args?.length) {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name]));\n            } else {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name, args]));\n            }\n        } catch (e) {\n            console.error(`Cannot send: ${e}`);\n            this.close();\n        }\n    };\n\n    on(\n        name: string,\n        cb: SocketEventHandler | SocketErrorHandler | SocketDisconnectionHandler | SocketConnectionHandler,\n    ): void {\n        if (cb) {\n            if (name === 'connect') {\n                this.connectHandlers.push(cb as SocketConnectionHandler);\n            } else if (name === 'disconnect') {\n                this.disconnectHandlers.push(cb as SocketDisconnectionHandler);\n            } else if (name === 'reconnect') {\n                this.reconnectHandlers.push(cb as SocketConnectionHandler);\n            } else if (name === 'error') {\n                this.errorHandlers.push(cb as SocketErrorHandler);\n            } else {\n                this.handlers[name] = this.handlers[name] || [];\n                this.handlers[name].push(cb as SocketEventHandler);\n            }\n        }\n    }\n\n    off(\n        name: string,\n        cb: SocketEventHandler | SocketErrorHandler | SocketDisconnectionHandler | SocketConnectionHandler,\n    ): void {\n        if (name === 'connect') {\n            const pos = this.connectHandlers.indexOf(cb as SocketConnectionHandler);\n            if (pos !== -1) {\n                this.connectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'disconnect') {\n            const pos = this.disconnectHandlers.indexOf(cb as SocketDisconnectionHandler);\n            if (pos !== -1) {\n                this.disconnectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'reconnect') {\n            const pos = this.reconnectHandlers.indexOf(cb as SocketConnectionHandler);\n            if (pos !== -1) {\n                this.reconnectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'error') {\n            const pos = this.errorHandlers.indexOf(cb as SocketErrorHandler);\n            if (pos !== -1) {\n                this.errorHandlers.splice(pos, 1);\n            }\n        } else if (this.handlers[name]) {\n            const pos = this.handlers[name].indexOf(cb as SocketEventHandler);\n            if (pos !== -1) {\n                this.handlers[name].splice(pos, 1);\n                if (!this.handlers[name].length) {\n                    delete this.handlers[name];\n                }\n            }\n        }\n    }\n\n    close(): SocketClient {\n        if (this.pingInterval) {\n            clearInterval(this.pingInterval);\n            this.pingInterval = null;\n        }\n\n        if (this.authTimeout) {\n            clearTimeout(this.authTimeout);\n            this.authTimeout = null;\n        }\n\n        if (this.connectingTimer) {\n            clearTimeout(this.connectingTimer);\n            this.connectingTimer = null;\n        }\n\n        if (this.socket) {\n            try {\n                this.socket.close();\n            } catch {\n                // ignore\n            }\n            this.socket = null;\n        }\n\n        if (this.connected) {\n            this.disconnectHandlers.forEach(cb => cb.call(this));\n            this.connected = false;\n        }\n\n        this.callbacks = [];\n\n        this._reconnect();\n\n        return this;\n    }\n\n    // alias for back compatibility\n    disconnect = this.close;\n\n    destroy(): void {\n        this.close();\n        if (this.connectTimer) {\n            clearTimeout(this.connectTimer);\n            this.connectTimer = null;\n        }\n    }\n\n    private _reconnect(): void {\n        if (!this.connectTimer) {\n            this.log.debug(`Start reconnect ${this.connectionCount}`);\n            this.connectTimer = setTimeout(\n                () => {\n                    if (!this.options) {\n                        throw new Error('No options provided!');\n                    }\n                    this.connectTimer = null;\n                    if (this.connectionCount < (this.options?.connectMaxAttempt || 5)) {\n                        this.connectionCount++;\n                    }\n                    this.connect(this.url, this.options);\n                },\n                this.connectionCount * (this.options?.connectInterval || 1000),\n            );\n        } else {\n            this.log.debug(`Reconnect is already running ${this.connectionCount}`);\n        }\n    }\n}\n\n// every time creates a new socket\nfunction connect(url?: string, options?: ConnectOptions): SocketClient {\n    const socketClient = new SocketClient();\n    socketClient.connect(url, options);\n    return socketClient;\n}\n\n(globalThis as any).io = {\n    connect,\n};\n"],"mappings":";;;;;;QAO2C,IAA/BA,WAAmBC,UAE1BD,WAAmBE,WAAa,CAC7BC,KAAM,yBACNC,SAAU,QACVC,KAAM,iBACNC,SAAU,IACVC,SAAU,YACVC,OAAQ,SAyBhB,MAAMC,cAAwC,CAC1CC,QAAS,EACTC,KAAM,EACNC,KAAM,EACNC,SAAU,GAGRC,OAAQ,EAERC,OAAiC,CACnC,IAAM,eACN,KAAM,mBACN,KAAM,uBACN,KAAM,oBACN,KAAM,mBACN,KAAM,iBACN,KAAM,sBACN,KAAM,mBACN,KAAM,kBACN,KAAM,sBACN,KAAM,eACN,KAAM,kBACN,KAAM,kBACN,KAAM,sBACN,KAAM,sBASV,MAAMC,aACeC,gBAA6C,GAC7CC,kBAA+C,GAC/CC,mBAAmD,GACnDC,cAAsC,GAEtCC,SAEb,GACIC,cAAe,EACfC,aAAqD,KACrDC,gBAAwD,KACxDC,gBAAkB,EAClBC,UAA2E,GAC3EC,QAA2C,GAC3CC,GAAK,EACLC,SAAmB,EACnBC,OAA2B,KAC3BC,IAAc,GACdC,QAAiC,KACjCC,aAAsD,KACtDC,UAAY,EACZC,YAAoD,KAErDC,WAAY,EAEFC,IAMjB,WAAAC,GACIC,KAAKF,IAAM,CACPG,MAAQC,OAEAC,QAAQL,IAAI,KAAI,IAAIM,MAAOC,kBAAkBH,SAGrDI,KAAOJ,MAAiBC,QAAQG,KAAK,KAAI,IAAIF,MAAOC,kBAAkBH,QACtEK,MAAQL,MAAiBC,QAAQI,MAAM,KAAI,IAAIH,MAAOC,kBAAkBH,QAEhF,CAEQ,eAAOM,CAASC,MACpB,MACMC,OADQD,KAAKE,MAAM,KAAK,IAAM,IAChBA,MAAM,KACpBC,OAAiC,GACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,MAAMI,OAAQD,IAAK,CAEnCD,OADeF,MAAMG,GAAGF,MAAM,KAChB,IAAMI,mBAAmBL,MAAM,GACjD,CACA,OAAOE,MACX,CAEA,OAAAI,CAAQxB,IAAcC,SAgBlB,GAfAO,KAAKF,IAAIG,MAAM,kBAGXT,MACAA,IAAMA,IAAImB,MAAM,KAAK,IAGzBX,KAAKX,GAAK,EACNW,KAAKhB,eACLiC,cAAcjB,KAAKhB,cACnBgB,KAAKhB,aAAe,MAGxBgB,KAAKR,MAAQA,KAAO/B,WAAWE,SAASC,KACxCoC,KAAKP,UAAYyB,KAAKC,MAAMD,KAAKE,UAAU3B,SAAW,MACjDO,KAAKP,QACN,MAAM,IAAI4B,MAAM,wBAGhB5B,SAAS6B,YACTtB,KAAKP,QAAQ6B,UAAY7B,SAAS6B,WAGtCtB,KAAKP,QAAQ8B,YAAcC,SAASxB,KAAKP,QAAQ8B,YAAkC,KAAO,IAC1FvB,KAAKP,QAAQC,aAAe8B,SAASxB,KAAKP,QAAQC,aAAmC,KAAO,IAC5FM,KAAKP,QAAQgC,eAAiBD,SAASxB,KAAKP,QAAQgC,eAAqC,KAAO,IAChGzB,KAAKP,QAAQG,YAAc4B,SAASxB,KAAKP,QAAQG,YAAkC,KAAO,IAC1FI,KAAKP,QAAQiC,gBAAkBF,SAASxB,KAAKP,QAAQiC,gBAAsC,KAAO,IAClG1B,KAAKP,QAAQkC,kBAAoBH,SAASxB,KAAKP,QAAQkC,kBAAwC,KAAO,EAEtG3B,KAAKL,UAAYS,KAAKwB,MACtB,IACI,GAAiB,MAAb5B,KAAKR,IAAa,CAClB,MAAMkB,MAAQjD,WAAWE,SAASI,SAAS4C,MAAM,MAE7ClD,WAAWE,SAASI,SAAS8D,SAAS,UAAYpE,WAAWE,SAASI,SAAS8D,SAAS,UACxFnB,MAAMoB,MAGV9B,KAAKR,IAAM,GAAG/B,WAAWE,SAASE,UAAY,UAAUJ,WAAWE,SAASG,MAAQ,eAAe4C,MAAMqB,KAAK,MAClH,CAGA,MAAMC,MAAQvD,aAAa+B,SAASR,KAAKR,KACrCwC,MAAMC,YACCD,MAAMC,IAGbC,OAAOC,UAAUC,eAAeC,KAAKL,MAAO,YACrCA,MAAM,IAGjB,IAAIM,EAAI,GAAGtC,KAAKR,IAAI+C,QAAQ,QAAS,MAAM5B,MAAM,KAAK,UAAUX,KAAKL,YAGjEuC,OAAOM,KAAKR,OAAOlB,SACnBwB,GAAK,IAAIJ,OAAOM,KAAKR,OAChBS,IAAIC,WAAyBC,IAAhBX,MAAMU,MAAsBA,KAAO,GAAGA,QAAQV,MAAMU,SACjEX,KAAK,QAGV/B,KAAKP,SAASmD,OAASZ,MAAMY,OAC7BN,GAAK,SAASO,mBAAmB7C,KAAKP,QAAQmD,SAE9C5C,KAAKP,SAASqD,QACdR,GAAK,UAAUtC,KAAKP,QAAQqD,SAGhC9C,KAAKT,OAAS,IAAKS,KAAKP,QAAQ6B,WAAa7D,WAAW6D,WAAWgB,EACvE,CAAE,MAAO/B,OAGL,OAFAP,KAAKlB,SAASyB,OAAOwC,QAAQC,IAAMA,GAAGX,KAAKrC,KAAMO,QACjDP,KAAKiD,QACEjD,IACX,CA0HA,OAxHAA,KAAKf,gBAAkBiE,WAAW,KAC9BlD,KAAKf,gBAAkB,KACvBe,KAAKF,IAAIQ,KAAK,gDACdN,KAAKiD,SACNjD,KAAKP,QAAQgC,gBAEZzB,KAAKT,SACLS,KAAKT,OAAO4D,OAAS,KACjBnD,KAAKV,SAAWc,KAAKwB,MACrB5B,KAAKd,gBAAkB,EAEvBc,KAAKN,aAAe0D,YAAY,KAC5B,IAAKpD,KAAKP,QACN,MAAM,IAAI4B,MAAM,wBAGpB,GAAIjB,KAAKwB,MAAQ5B,KAAKV,UAAYU,KAAKP,SAASC,cAAgB,KAAQ,GACpE,IACIM,KAAKT,QAAQ8D,KAAKnC,KAAKE,UAAU,CAAClD,cAAcE,OACpD,CAAE,MAAOkF,GAIL,OAHAtD,KAAKF,IAAIQ,KAAK,uCAAuCgD,KACrDtD,KAAKiD,aACLjD,KAAKuD,iBAET,CAEAnD,KAAKwB,MAAQ5B,KAAKV,UAAYU,KAAKP,SAAS8B,aAAe,MAC3DvB,KAAKiD,QAETjD,KAAKuD,mBACNvD,KAAKP,SAASC,cAAgB,MAGrCM,KAAKT,OAAOiE,QAAWC,QACA,OAAfA,MAAMC,KACN1D,KAAKF,IAAIQ,KAAK,aAEdN,KAAKF,IAAIS,MAAM,wBAAwB/B,OAAOiF,MAAMC,SAExD1D,KAAKiD,SAITjD,KAAKT,OAAOoE,QAAWpD,QACfP,KAAKH,WAAaG,KAAKT,SACQ,IAA3BS,KAAKT,OAAOqE,YACZ5D,KAAKF,IAAIS,MAAM,oBAAoBA,MAAMsD,QAE7C7D,KAAKnB,cAAckE,QAAQC,IAAMA,GAAGX,KAAKrC,KAAMxB,OAAO+B,MAAMmD,OAAS,aAEzE1D,KAAKiD,SAGTjD,KAAKT,OAAOuE,UAAaC,UAErB,GADA/D,KAAKV,SAAWc,KAAKwB,OAChBmC,SAASC,MAAgC,iBAAjBD,QAAQC,KAEjC,YADA7D,QAAQI,MAAM,6BAA6BW,KAAKE,UAAU2C,YAG9D,IAAIC,KACJ,IACIA,KAAO9C,KAAKC,MAAM4C,QAAQC,KAC9B,CAAE,MAEE,YADA7D,QAAQI,MAAM,6BAA6BW,KAAKE,UAAU2C,QAAQC,QAEtE,CAEA,MAAMH,KAAeG,KAAK,GACpB3E,GAAa2E,KAAK,GAClBpB,KAAeoB,KAAK,GACpBC,KAAcD,KAAK,GAErBhE,KAAKJ,cACLsE,aAAalE,KAAKJ,aAClBI,KAAKJ,YAAc,MAGnBiE,OAAS3F,cAAcI,SACvB0B,KAAKmE,WAAW9E,GAAI4E,MACbJ,OAAS3F,cAAcC,QACjB,gBAATyE,MACA5C,KAAKH,WAAY,EAEbG,KAAKjB,aACLiB,KAAKrB,kBAAkBoE,QAAQC,IAAMA,GAAGX,KAAKrC,MAAM,KAEnDA,KAAKtB,gBAAgBqE,QAAQC,IAAMA,GAAGX,KAAKrC,MAAM,IACjDA,KAAKjB,cAAe,GAGpBiB,KAAKf,kBACLiF,aAAalE,KAAKf,iBAClBe,KAAKf,gBAAkB,MAIvBe,KAAKZ,QAAQ0B,SACbd,KAAKZ,QAAQ2D,QAAQ,EAAGH,UAAMqB,aAAWjE,KAAKoE,KAAKxB,QAASqB,OAE5DjE,KAAKZ,QAAU,KAEZ6E,KACPjE,KAAKlB,SAAS8D,OAAOG,QAAQC,IAAMA,GAAGqB,MAAMrE,KAAMiE,OAElDjE,KAAKlB,SAAS8D,OAAOG,QAAQC,IAAMA,GAAGX,KAAKrC,OAExC6D,OAAS3F,cAAcE,KAC1B4B,KAAKT,OACLS,KAAKT,OAAO8D,KAAKnC,KAAKE,UAAU,CAAClD,cAAcG,QAE/C2B,KAAKF,IAAIQ,KAAK,qCAEXuD,OAAS3F,cAAcG,MAG9B2B,KAAKF,IAAIQ,KAAK,kCAAkCuD,UAKrD7D,IACX,CAEQ,eAAAuD,GACQnD,KAAKwB,MACjB,IAAI0C,MAAQ,EAkBZ,GAAIA,MAAQtE,KAAKb,UAAU2B,OAAS,EAAG,CACnC,MAAMyD,YAAc,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIxE,KAAKb,UAAU2B,OAAQ0D,IACvCxE,KAAKb,UAAUqF,IAAMD,YAAYE,KAAKzE,KAAKb,UAAUqF,IAEzDxE,KAAKb,UAAYoF,WACrB,CACJ,CAEQ,YAAAG,CAAa9B,KAAcvD,GAAY4E,KAAajB,IAC3C,iBAATJ,OACA5C,KAAKJ,YAAcsD,WAAW,KAC1BlD,KAAKJ,YAAc,KACfI,KAAKH,YACLG,KAAKF,IAAIG,MAAM,wBACfD,KAAKlB,SAASyB,OAAOwC,QAAQC,IAAMA,GAAGX,KAAKrC,KAAM,0BAErDA,KAAKiD,SACNjD,KAAKP,SAASG,aAAe,MAEpCI,KAAKb,UAAUsF,KAAK,CAAEpF,MAAI2D,MAAI2B,GAAY,IAC1C3E,KAAKT,QAAQ8D,KAAKnC,KAAKE,UAAU,CAAClD,cAAcI,SAAUe,GAAIuD,KAAMqB,OACxE,CAEQ,UAAAE,CAAW9E,GAAY4E,MAC3B,IAAK,IAAIO,EAAI,EAAGA,EAAIxE,KAAKb,UAAU2B,OAAQ0D,IAAK,CAC5C,MAAMI,SAAW5E,KAAKb,UAAUqF,GAChC,GAAII,UAAUvF,KAAOA,GAAI,CACVuF,SAAS5B,GACjBX,KAAK,QAAS4B,MACjBjE,KAAKb,UAAUqF,GAAK,IACxB,CACJ,CACJ,CAEAJ,KAAO,CAACxB,QAAiBqB,QACrB,GAAKjE,KAAKT,QAAWS,KAAKH,UAA1B,CAYA,GAFAG,KAAKX,KAEQ,cAATuD,MAAwBqB,MAA2B,iBAAZA,KAAK,IAAmBA,KAAK,GAGpE,QAA2C,IAA/BxG,WAAmBC,QAE3BuG,KAAK,GAAMxG,WAAmBoH,OAAOC,KAAKb,KAAK,IAAIc,SAAS,cACzD,CAEH,IAAIC,OAAS,GACb,MAAMC,MAAQ,IAAIC,WAAWjB,KAAK,IAC5BkB,IAAMF,MAAMG,WAClB,IAAK,IAAIZ,EAAI,EAAGA,EAAIW,IAAKX,IACrBQ,QAAUK,OAAOC,aAAaL,MAAMT,IAExCP,KAAK,GAAKxG,WAAW8H,KAAKP,OAC9B,CAGJ,IAEI,GAAIf,MAAyC,mBAA1BA,KAAKA,KAAKnD,OAAS,GAAmB,CACrD,MAAM0E,MAAQ,IAAIvB,MACZwB,aAAmCD,MAAM1D,MAC/C9B,KAAK0E,aAAa9B,KAAM5C,KAAKX,GAAImG,MAAOC,aAC5C,MAAYxB,MAAMnD,OAGdd,KAAKT,OAAO8D,KAAKnC,KAAKE,UAAU,CAAClD,cAAcC,QAAS6B,KAAKX,GAAIuD,KAAMqB,QAFvEjE,KAAKT,OAAO8D,KAAKnC,KAAKE,UAAU,CAAClD,cAAcC,QAAS6B,KAAKX,GAAIuD,OAIzE,CAAE,MAAOU,GACLnD,QAAQI,MAAM,gBAAgB+C,KAC9BtD,KAAKiD,OACT,CApCA,MAPSjD,KAAKjB,aAINiB,KAAKF,IAAIQ,KAAK,iBAFdN,KAAKZ,QAAQqF,KAAK,CAAE7B,UAAMqB,aA4CtC,EAAAyB,CACI9C,KACAI,IAEIA,KACa,YAATJ,KACA5C,KAAKtB,gBAAgB+F,KAAKzB,IACV,eAATJ,KACP5C,KAAKpB,mBAAmB6F,KAAKzB,IACb,cAATJ,KACP5C,KAAKrB,kBAAkB8F,KAAKzB,IACZ,UAATJ,KACP5C,KAAKnB,cAAc4F,KAAKzB,KAExBhD,KAAKlB,SAAS8D,MAAQ5C,KAAKlB,SAAS8D,OAAS,GAC7C5C,KAAKlB,SAAS8D,MAAM6B,KAAKzB,KAGrC,CAEA,GAAA2C,CACI/C,KACAI,IAEA,GAAa,YAATJ,KAAoB,CACpB,MAAMgD,IAAM5F,KAAKtB,gBAAgBmH,QAAQ7C,KAC5B,IAAT4C,KACA5F,KAAKtB,gBAAgBoH,OAAOF,IAAK,EAEzC,MAAO,GAAa,eAAThD,KAAuB,CAC9B,MAAMgD,IAAM5F,KAAKpB,mBAAmBiH,QAAQ7C,KAC/B,IAAT4C,KACA5F,KAAKpB,mBAAmBkH,OAAOF,IAAK,EAE5C,MAAO,GAAa,cAAThD,KAAsB,CAC7B,MAAMgD,IAAM5F,KAAKrB,kBAAkBkH,QAAQ7C,KAC9B,IAAT4C,KACA5F,KAAKrB,kBAAkBmH,OAAOF,IAAK,EAE3C,MAAO,GAAa,UAAThD,KAAkB,CACzB,MAAMgD,IAAM5F,KAAKnB,cAAcgH,QAAQ7C,KAC1B,IAAT4C,KACA5F,KAAKnB,cAAciH,OAAOF,IAAK,EAEvC,MAAO,GAAI5F,KAAKlB,SAAS8D,MAAO,CAC5B,MAAMgD,IAAM5F,KAAKlB,SAAS8D,MAAMiD,QAAQ7C,KAC3B,IAAT4C,MACA5F,KAAKlB,SAAS8D,MAAMkD,OAAOF,IAAK,GAC3B5F,KAAKlB,SAAS8D,MAAM9B,eACdd,KAAKlB,SAAS8D,MAGjC,CACJ,CAEA,KAAAK,GAgBI,GAfIjD,KAAKN,eACLuB,cAAcjB,KAAKN,cACnBM,KAAKN,aAAe,MAGpBM,KAAKJ,cACLsE,aAAalE,KAAKJ,aAClBI,KAAKJ,YAAc,MAGnBI,KAAKf,kBACLiF,aAAalE,KAAKf,iBAClBe,KAAKf,gBAAkB,MAGvBe,KAAKT,OAAQ,CACb,IACIS,KAAKT,OAAO0D,OAChB,CAAE,MAEF,CACAjD,KAAKT,OAAS,IAClB,CAWA,OATIS,KAAKH,YACLG,KAAKpB,mBAAmBmE,QAAQC,IAAMA,GAAGX,KAAKrC,OAC9CA,KAAKH,WAAY,GAGrBG,KAAKb,UAAY,GAEjBa,KAAK+F,aAEE/F,IACX,CAGAgG,WAAahG,KAAKiD,MAElB,OAAAgD,GACIjG,KAAKiD,QACDjD,KAAKhB,eACLkF,aAAalE,KAAKhB,cAClBgB,KAAKhB,aAAe,KAE5B,CAEQ,UAAA+G,GACC/F,KAAKhB,aAgBNgB,KAAKF,IAAIG,MAAM,gCAAgCD,KAAKd,oBAfpDc,KAAKF,IAAIG,MAAM,mBAAmBD,KAAKd,mBACvCc,KAAKhB,aAAekE,WAChB,KACI,IAAKlD,KAAKP,QACN,MAAM,IAAI4B,MAAM,wBAEpBrB,KAAKhB,aAAe,KAChBgB,KAAKd,iBAAmBc,KAAKP,SAASkC,mBAAqB,IAC3D3B,KAAKd,kBAETc,KAAKgB,QAAQhB,KAAKR,IAAKQ,KAAKP,UAEhCO,KAAKd,iBAAmBc,KAAKP,SAASiC,iBAAmB,MAKrE,EAIJ,SAASV,QAAQxB,IAAcC,SAC3B,MAAMyG,aAAe,IAAIzH,aAEzB,OADAyH,aAAalF,QAAQxB,IAAKC,SACnByG,YACX,CAECzI,WAAmB0I,GAAK,CACrBnF","ignoreList":[]}